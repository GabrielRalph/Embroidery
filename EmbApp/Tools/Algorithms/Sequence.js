const name = "Sequence";

const properties = null;

const icon = `
<svg viewBox="0 0 100 60">
<g>
	<path class="i-stitch-d" d="M15.222,55.624h-3.161c-3.946,0-7.144-3.199-7.144-7.144V36.212c0-3.946,3.199-7.144,7.144-7.144h3.161
		c3.946,0,7.144,3.199,7.144,7.144v12.267C22.366,52.425,19.168,55.624,15.222,55.624C15.222,55.624,19.168,55.624,15.222,55.624z"
		/>
</g>
<g>
	<path class="i-stitch-d" d="M63.058,55.624h-2.431c-3.802,0-6.883-3.082-6.883-6.883v-12.79c0-3.802,3.082-6.883,6.883-6.883h2.431
		c3.802,0,6.883,3.082,6.883,6.883V48.74C69.941,52.542,66.859,55.624,63.058,55.624C63.058,55.624,66.859,55.624,63.058,55.624z"/>
</g>
<g class = "i-color-f">
	<path d="M35.765,3.195c0.636-0.67,1.129-1.006,1.482-1.006c0.282,0,0.618,0.142,1.006,0.424l0.53,0.371l-0.106,3.335
		c-0.071,2.083-0.177,3.426-0.319,4.025c-0.14,0.601-0.248,2.93-0.317,6.989c-0.071,3.882-0.213,6.83-0.424,8.842
		c-0.211,1.907-0.317,3.654-0.317,5.242v2.648l1.642,0.211c1.482,0.177,2.911,0.265,4.287,0.265c0.707,0,1.271-0.034,1.696-0.106
		c0.106-0.034,0.246-0.054,0.422-0.054c0.918,0,1.377,0.478,1.377,1.431c0,0.493-0.114,0.821-0.343,0.98
		c-0.231,0.157-0.752,0.237-1.562,0.237c-0.672,0-1.254-0.017-1.747-0.052c-1.131-0.037-2.525-0.159-4.184-0.371
		c-0.707-0.071-1.131-0.108-1.271-0.108c-0.422,0-0.793,0.054-1.112,0.159c-0.601,0.14-1.041,0.14-1.323,0
		c-0.248-0.14-1.801-0.211-4.66-0.211c-2.329,0-3.706-0.062-4.13-0.185c-0.424-0.123-0.653-0.504-0.687-1.14
		c-0.037-0.422,0.192-0.776,0.687-1.058c0.459-0.246,1.077-0.371,1.853-0.371c0.142,0,0.989,0.034,2.542,0.106l3.654,0.106
		l0.157-0.952c0.071-0.493,0.108-1.023,0.108-1.588v-0.53c0-0.741,0.034-1.217,0.106-1.431c0.388-1.092,0.616-4.888,0.687-11.384
		c0.106-5.964,0.282-9.176,0.53-9.635c0.14-0.282,0.211-0.689,0.211-1.219c0-0.388-0.026-0.625-0.08-0.713
		c-0.052-0.088-0.185-0.097-0.396-0.028c-0.353,0.177-0.989,0.513-1.907,1.006c-0.918,0.496-1.73,0.918-2.435,1.271
		c-0.707,0.353-1.308,0.601-1.801,0.741c-0.812,0.282-1.323,0.496-1.534,0.636c-0.284,0.211-0.618,0.371-1.006,0.476
		c-0.284,0.071-0.496,0.08-0.636,0.028c-0.142-0.054-0.336-0.222-0.584-0.504c-0.353-0.353-0.528-0.687-0.528-1.006
		c0-0.282,0.166-0.53,0.502-0.741c0.336-0.211,0.696-0.317,1.086-0.317c0.459,0,0.758-0.071,0.901-0.213
		c0.175-0.177,0.776-0.44,1.799-0.793c1.094-0.388,2.012-0.829,2.753-1.325c0.282-0.177,0.618-0.379,1.006-0.608
		c0.388-0.231,0.67-0.399,0.847-0.504c0.177-0.106,0.399-0.274,0.664-0.502C35.155,3.839,35.448,3.549,35.765,3.195z"/>
	<path d="M80.271,3.328c1.094-0.53,1.978-0.795,2.648-0.795H83.5c0.883,0.037,1.924,0.319,3.124,0.847
		c1.129,0.53,1.713,0.795,1.747,0.795c0.248,0,1.041,0.636,2.383,1.907c1.342,1.271,2.189,2.206,2.542,2.805
		c0.282,0.496,0.422,1.202,0.422,2.118c0,0.284-0.034,0.814-0.106,1.59c-0.282,2.719-1.058,5.162-2.329,7.332
		c-1.271,2.172-3.266,4.44-5.983,6.806c-1.553,1.34-3.372,3.264-5.453,5.77c-0.39,0.39-0.549,0.618-0.478,0.689
		c0.034,0.034,2.702,0.08,7.995,0.131c5.296,0.054,8.03,0.134,8.208,0.239c0.493,0.177,0.741,0.618,0.741,1.323
		c0,0.213-0.019,0.371-0.054,0.476l-0.159,0.584h-8.577c-5.612,0-8.93,0.14-9.954,0.422c-0.883,0.213-1.553,0.319-2.012,0.319
		c-0.672,0-1.077-0.353-1.217-1.06c-0.037-0.106-0.054-0.265-0.054-0.476c0-0.847,0.194-1.271,0.582-1.271
		c0.177,0,0.821-0.573,1.933-1.719c1.114-1.148,1.793-1.952,2.04-2.411c0.246-0.388,1.032-1.26,2.355-2.62
		c1.325-1.359,2.232-2.215,2.728-2.568c0.422-0.282,0.801-0.59,1.138-0.926c0.336-0.336,0.741-0.786,1.219-1.351
		c0.476-0.564,0.819-0.952,1.032-1.166c0.705-0.741,1.377-1.648,2.012-2.725s1.041-1.967,1.217-2.674
		c0.177-0.67,0.282-1.023,0.317-1.06c0.282-0.564,0.424-1.728,0.424-3.495c0-0.493-0.019-0.793-0.054-0.901
		c-0.177-0.636-0.881-1.463-2.118-2.488c-2.152-1.728-4.005-2.594-5.559-2.594c-0.778,0-1.482,0.211-2.118,0.636
		c-0.39,0.211-0.918,0.618-1.588,1.217c-0.39,0.39-0.724,0.618-1.006,0.689c-0.39,0.14-1.051,0.909-1.986,2.303
		s-1.403,2.32-1.403,2.779c0,0.353-0.054,0.564-0.159,0.636c-0.106,0.071-0.336,0.071-0.687,0c-0.707-0.106-1.06-0.741-1.06-1.907
		c0-0.282,0.017-0.493,0.054-0.636c0.069-0.351,0.131-0.625,0.185-0.821c0.052-0.194,0.131-0.388,0.237-0.582
		c0.106-0.194,0.194-0.414,0.265-0.661c0.071-0.424,0.795-1.288,2.172-2.594C77.799,4.898,79.07,3.929,80.271,3.328z"/>
</g>
</svg>
`

const pattern = /^r?\([ls\(\)]+\)$/

const COLOR = "#506bffb5"

function findLoopStart(path) {
	let min = null;
	let dpath = path.dpath;
	for (let cpoint of dpath) {
		if (min == null || cpoint.p.x < min.p.x) {
			min = cpoint;
		}
	}
	path.setStart(min);
	return min.p;
}

function findPathStart(path) {
	// console.log('xx');
	let dpath = path.dpath;
	if (dpath.start.p.x > dpath.end.p.x) {
		path.flip();
	}
// console.log('xxxx');
	path.updateDPath();

	return dpath.start.p;
}

function run(params) {
	// console.log('xxx');
  let group = params.input;
  let output = params.guides;
  let props = params.props;

	let sequence = (node) => {
		let start = null;
		if (node.stype == "group") {
			for (let child of node.children) {
				sequence(child);
			}

			// console.log("sorting x,y");
			// sorting by x and y
			let children = [...node.children];
			children.sort((a, b) => {
				let ax = a.sequenceStart.x;
				let ay = a.sequenceStart.y;
				let bx = b.sequenceStart.x;
				let by = b.sequenceStart.y;
				if (ax > bx) {
					return 1;
				} else if (ax == bx) {
					return (ay < by) ? 1 : -1;
				} else {
					return -1;
				}
			});

			// get color orders
			// console.log("finding color orders");
			let colorOrder = {};
			let order = 0;
			for (let node of children) {
				let idx = node.colorIndex
				if(idx > 0 && !(idx in colorOrder)) {
					colorOrder[idx] = order;
					order++;
				}
			}
			children.sort((a, b) => {
				let ac = colorOrder[a.colorIndex];
				let bc = colorOrder[b.colorIndex];
				let ax = a.sequenceStart.x;
				let ay = a.sequenceStart.y;
				let bx = b.sequenceStart.x;
				let by = b.sequenceStart.y;
				let res = 0;
				if (ac > bc) {
					res = 1;
				} else if (ac < bc) {
					res = -1;
				} else {
					if (ax > bx) {
						res = 1;
					} else if (ax == bx) {
						res = (ay < by) ? 1 : -1;
					} else {
						res = -1;
					}
				}
				return res;
			});

			// console.log("applying sorting");
			for (let child of children) {
				node.appendChild(child);
			}

			start = children[0].sequenceStart;
		} else {
			if (node.stype == "spath-loop") {
				start = findLoopStart(node);
			} else {
				start = findPathStart(node);
			}
		}
		node.sequenceStart = start;
	}
	sequence(group);

	let leafs = group.getSPaths();

	const time = 5;
	const n = leafs.length;
  return {
    *[Symbol.iterator]() {
			group.selected = false;
			let path = output.makeSPath();
			path.color = COLOR;
			let i = 0;
			let last = null;
			for (let leaf of leafs){
				if (last != null) {
					path.addPoint(last.dpath.end.p);
					path.addPoint(leaf.dpath.start.p);
					path = output.makeSPath();
					path.color = COLOR;
				}
				leaf.selected = true;
				for (let j = 0; j < time; j++) {
					yield (time * i + j) / (time * n);
				}
				leaf.selected = false;
				i++;
				last = leaf;
			}
    }
  };
}

export {name, properties, run, pattern, icon}
